Index: oplog_applier/oplog_applier/oplog_applier.gv
===================================================================
--- oplog_applier.orig/oplog_applier/oplog_applier.gv
+++ oplog_applier/oplog_applier/oplog_applier.gv
@@ -29,14 +29,23 @@ fontsize = "16";
 
 "OplogApplier" [
 fillcolor = white;
-label = "OplogApplier \l(has OplogBuffer)\l|<enqueue> * enqueue\l|<multiApply> * multiApply\l|<shutdown> * shutdown\l|OplogApplierImpl\l(has SyncTail)\l|<getNextApplierBatch> * getNextApplierBatch\l|<_runLoop> * _runLoop\l|<_multiApply> * _multiApply\l"
+label = "OplogApplier \l(has OplogBuffer, OpQueueBatcher)\l|<enqueue> * enqueue\l|<multiApply> * multiApply\l|OplogApplierImpl\l|<getNextApplierBatch> * getNextApplierBatch\l|<_shutdown> * _shutdown\l|<_run> * _run\l|<_multiApply> * _multiApply\l|<fillWriterVectors> * fillWriterVectors\l"
 ];
 
 OplogApplier:enqueue -> OplogBuffer:push;
-OplogApplier:_run -> SyncTail:runLoop;
-OplogApplier:_shutdown -> SyncTail:shutdown;
-OplogApplier:multiApply -> OplogApplier:_multiApply;
-OplogApplier:_multiApply -> SyncTail:multiApply;
+OplogApplier:multiApply->OplogApplier:_multiApply;
+OplogApplier:_run -> OpQueueBatcher:getNextBatch;
+OplogApplier:_run -> OpQueueBatcher:empty;
+OplogApplier:_run -> OpQueueBatcher:mustShutdown;
+OplogApplier:_run -> ReplicationCoordinator:tryToGoLiveAsASecondary;
+OplogApplier:_run -> OplogApplier:_multiApply;
+OplogApplier:_multiApply -> scheduleWritesToOplog;
+OplogApplier:_multiApply -> OplogApplier:fillWriterVectors;
+OplogApplier:_multiApply -> applyOplogGroup [label=_applyFunc];
+OplogApplier:_multiApply -> ReplicationCoordinator:getApplierState;
+
+applyOplogEntryBatch -> applyOperation_inlock;
+applyOplogEntryBatch -> applyCommand_inlock;
 
 OplogApplier:getNextApplierBatch -> OplogBuffer:peek [weight=2];
 OplogApplier:getNextApplierBatch -> OplogBuffer:tryPop;
@@ -54,52 +63,35 @@ label = "ReplicationCoordinator\l|<tryTo
 ];
 
 /*
- * synctail_.cpp
+ * op_queue_batcher.cpp
  *
  */
 
 // Has _getNextApplierBatchFn - this is OplogApplier::getNextApplierBatch in oplog_applier.cpp
 "OpQueueBatcher" [
-fillcolor = "lightblue";
-label = "SyncTail::OpQueueBatcher\l(sync_tail.cpp)\l|<run> * run\l|<getNextBatch> * getNextBatch\l|<empty> * empty\l|<mustShutdown> * mustShutdown\l"
-];
-
-"SyncTail" [
-fillcolor = "lightblue";
-label = "SyncTail\l(sync_tail.cpp)\l|<runLoop> * runLoop\l| <shutdown> * shutdown\l|<multiApply> * multiApply\l|<fillWriterVectors> * fillWriterVectors\l";
+fillcolor = "salmon";
+	label =  "OpQueueBatcher\l(op_queue_batcher.cpp)\l|<run> * run\l|<getNextBatch> * getNextBatch\l|<empty> * empty\l|<mustShutdown> * mustShutdown\l"
 ];
 
-"syncApply" [
-fillcolor = "lightblue";
-label = "syncApply";
+"applyOplogEntryBatch" [
+fillcolor = "white";
+label = "applyOplogEntryBatch";
 ];
 
-SyncTail:runLoop -> OpQueueBatcher:getNextBatch;
-SyncTail:runLoop -> OpQueueBatcher:empty;
-SyncTail:runLoop -> OpQueueBatcher:mustShutdown;
-SyncTail:runLoop -> SyncTail:multiApply;
-SyncTail:runLoop -> ReplicationCoordinator:tryToGoLiveAsASecondary;
-SyncTail:multiApply -> scheduleWritesToOplog;
-SyncTail:multiApply -> multiSyncApply [label=_applyFunc];
-SyncTail:multiApply -> SyncTail:fillWriterVectors;
-SyncTail:multiApply -> ReplicationCoordinator:getApplierState;
-
-syncApply -> applyOperation_inlock;
-syncApply -> applyCommand_inlock;
 
 OpQueueBatcher:run -> OplogApplier:getNextApplierBatch [label = _getNextApplierBatchFn];
 OpQueueBatcher:run -> OplogBuffer:waitForData;
 
-"multiSyncApply" [
-fillcolor = "lightblue";
-label = "multiSyncApply\l(sync_tail.cpp)\l  worker thread func, actually applies\l";
+"applyOplogGroup" [
+fillcolor = "white";
+label = "applyOplogGroup\l(oplog_applier_impl.cpp)\l  worker thread func, actually applies\l";
 ];
 
-multiSyncApply -> syncApply;
-multiSyncApply -> InsertGroup:groupAndApplyInserts;
+applyOplogGroup -> applyOplogEntryBatch;
+applyOplogGroup -> InsertGroup:groupAndApplyInserts;
 
 "scheduleWritesToOplog" [
-fillcolor = "lightblue";
+fillcolor = "white";
 label = "scheduleWritesToOplog\l(oplog_applier_impl.cpp)\l";
 ];
 
@@ -112,7 +104,7 @@ fillcolor = "yellow";
 label = "InsertGroup\l(applier_helpers.cpp)\l|<groupAndApplyInserts> * groupAndApplyInserts\l";
 ];
 
-InsertGroup:groupAndApplyInserts -> syncApply;
+InsertGroup:groupAndApplyInserts -> applyOplogEntryBatch;
 
 /*
  * oplog.cpp
@@ -148,6 +140,6 @@ label = "InitialSyncer\l|<_enqueueDocume
 ]
 
 InitialSyncer:_enqueueDocuments -> OplogBuffer:waitForSpace;
-InitialSyncer:_enqueueDocuments -> OplogApplier:enqueue [weight=2];
+InitialSyncer:_enqueueDocuments -> OplogApplier:enqueue;
 
 }
