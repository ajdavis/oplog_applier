Index: oplog_applier/oplog_applier/oplog_applier.gv
===================================================================
--- oplog_applier.orig/oplog_applier/oplog_applier.gv
+++ oplog_applier/oplog_applier/oplog_applier.gv
@@ -29,23 +29,23 @@ fontsize = "16";
 
 "OplogApplier" [
 fillcolor = white;
-label = "OplogApplier \l(has OplogBuffer, OpQueueBatcher)\l|<waitForSpace> * waitForSpace\l|<enqueue> * enqueue\l|<multiApply> * multiApply\l|<shutdown> * shutdown\l|OplogApplierImpl\l|<getNextApplierBatch> * getNextApplierBatch\l|<_run> * _run\l|<_multiApply> * _multiApply\l|<fillWriterVectors> * _fillWriterVectors\l|<applyOplogGroup> * applyOplogGroup\l";
+label = "OplogApplier \l(has OplogBuffer, OpQueueBatcher)\l|<waitForSpace> * waitForSpace\l|<enqueue> * enqueue\l|<applyOplogBatch> * applyOplogBatch\l|<shutdown> * shutdown\l|OplogApplierImpl\l|<getNextApplierBatch> * getNextApplierBatch\l|<_run> * _run\l|<_applyOplogBatch> * _applyOplogBatch\l|<fillWriterVectors> * _fillWriterVectors\l|<applyOplogBatchPerWorker> * applyOplogBatchPerWorker\l";
 ];
 
 OplogApplier:enqueue -> OplogBuffer:push;
 OplogApplier:waitForSpace -> OplogBuffer:waitForSpace;
-OplogApplier:multiApply->OplogApplier:_multiApply;
+OplogApplier:multiApply->OplogApplier:_applyOplogBatch;
 OplogApplier:_run -> OpQueueBatcher:getNextBatch;
 OplogApplier:_run -> OpQueue:empty;
 OplogApplier:_run -> OpQueue:mustShutdown;
 OplogApplier:_run -> ReplicationCoordinator:tryToGoLiveAsASecondary;
-OplogApplier:_run -> OplogApplier:_multiApply;
-OplogApplier:_multiApply -> scheduleWritesToOplog;
-OplogApplier:_multiApply -> OplogApplier:fillWriterVectors;
-OplogApplier:_multiApply -> OplogApplier:applyOplogGroup;
+OplogApplier:_run -> OplogApplier:_applyOplogBatch;
+OplogApplier:_applyOplogBatch -> scheduleWritesToOplog;
+OplogApplier:_applyOplogBatch -> OplogApplier:fillWriterVectors;
+OplogApplier:_applyOplogBatch -> OplogApplier:applyOplogBatchPerWorker;
 
-applyOplogEntryBatch -> applyOperation_inlock;
-applyOplogEntryBatch -> applyCommand_inlock;
+applyOplogEntryOrGroupedInserts -> applyOperation_inlock;
+applyOplogEntryOrGroupedInserts -> applyCommand_inlock;
 
 OplogApplier:getNextApplierBatch -> OplogBuffer:peek [weight=2];
 OplogApplier:getNextApplierBatch -> OplogBuffer:tryPop;
@@ -83,13 +83,13 @@ OpQueueBatcher:run -> OpQueue:mustShutdo
 OpQueueBatcher:run -> OplogApplier:getNextApplierBatch [label = _getNextApplierBatchFn, weight=20];
 OpQueueBatcher:run -> OplogBuffer:waitForData;
 
-"applyOplogEntryBatch" [
+"applyOplogEntryOrGroupedInserts" [
 fillcolor = "white";
-label = "applyOplogEntryBatch\l(oplog_applier_impl.cpp)";
+label = "applyOplogEntryOrGroupedInserts\l(oplog_applier_impl.cpp)";
 ];
 
-OplogApplier:applyOplogGroup -> applyOplogEntryBatch;
-OplogApplier:applyOplogGroup -> InsertGroup:groupAndApplyInserts;
+OplogApplier:applyOplogBatchPerWorker -> applyOplogEntryOrGroupedInserts;
+OplogApplier:applyOplogBatchPerWorker -> InsertGroup:groupAndApplyInserts;
 
 "scheduleWritesToOplog" [
 fillcolor = "white";
@@ -105,7 +105,7 @@ fillcolor = "yellow";
 label = "InsertGroup\l(applier_helpers.cpp)\l|<groupAndApplyInserts> * groupAndApplyInserts\l";
 ];
 
-InsertGroup:groupAndApplyInserts -> applyOplogEntryBatch;
+InsertGroup:groupAndApplyInserts -> applyOplogEntryOrGroupedInserts;
 
 /*
  * oplog.cpp
